{"version":3,"sources":["webpack://cached-community/./src/api-client.js"],"names":["$","storage","localStorage","ajax","CachedCommunity","_save_user_state","user","setItem","JSON","stringify","document","body","dispatchEvent","_get_event","EVENT","user_update","_restore_user_state","parse","getItem","event","_event","Event","createEvent","initEvent","user_data_update","_postRequest","url","params","_request","method","Promise","resolve","reject","data","dataType","cache","xhrFields","withCredentials","then","fail","status","error","window","login","password","remember","logout","removeItem","fetchUserState","_getRequest","is_logged_in","logged_in","jQuery"],"mappings":"s7BAEA,SAAWA,GAEV,IAAMC,EAAUC,aACVC,EAAOC,gBAAgBD,KA8D7B,SAASE,EAAiBC,GAIzBF,gBAAgBE,KAAhB,OACKF,gBAAgBE,MAAQ,IACzBA,GAEJL,EAAQM,QAAQ,wBAAyBC,KAAKC,UAAUL,gBAAgBE,OACxEI,SAASC,KAAKC,cAAcC,EAAWT,gBAAgBU,MAAMC,cAQ9D,SAASC,IACR,OAAOR,KAAKS,MAAMhB,EAAQiB,QAAQ,0BAGnC,SAASL,EAAWM,GACnB,IAAIC,EAOJ,MANqB,mBAAVC,MACVD,EAAS,IAAIC,MAAMF,IAEnBC,EAASV,SAASY,YAAY,UACvBC,UAAUJ,GAAO,GAAM,GAExBC,EA1FKJ,IAEbZ,gBAAgBU,MAAQ,CACvBC,YAAa,+BACbS,iBAAkB,qCA4FnB,IACMC,EAAe,SAACC,GAAD,IAAMC,EAAN,uDAAe,GAAf,OAAqBC,EAASF,EAAK,OAAQC,IAW1DC,EAAW,SAACF,EAAKG,GAAN,IAAeF,EAAf,uDAAuB,GAAvB,OAA8B,IAAIG,SAAQ,SAACC,EAASC,GACpEhC,EAAEG,KAAK,CACN0B,SACAH,MACAO,KAAMN,EACNO,SAAU,OACVC,OAAO,EACPC,UAAW,CACVC,iBAAiB,KAGjBC,MAAK,SAAAL,GACLF,EAAQE,MAERM,MAAK,SAACN,EAAMO,EAAQC,GACpBT,EAAOC,EAAMO,EAAQC,UAQxBC,OAAOtC,gBAAP,OACIA,iBADJ,IAECE,KAAMU,IACN2B,MAhHa,SAACrC,EAAMsC,GAAP,IAAiBC,IAAjB,gEAAqCpB,EAClDtB,EAAKwC,MACL,CAACrC,OAAMsC,WAAUC,aAChBP,MAAK,SAAAL,GAEN,OADA5B,EAAiB4B,EAAK3B,MACf2B,MA4GPa,OAvFc,kBAAMrB,EAAatB,EAAK2C,QAAQR,MAAK,SAAAL,GAEnD,OAwBAhC,EAAQ8C,WAAW,yBACnBrC,SAASC,KAAKC,cAAcC,EAAWT,gBAAgBU,MAAMC,cAzBtDkB,MAsFPe,eA9HsB,kBAsFH,SAACtB,GAAD,OAAqBE,EAASF,EAAK,MAAnC,uDAAe,IAtFPuB,CAAY9C,EAAKwC,OAAOL,MAAK,SAAAL,GAExD,OADA5B,EAAiB4B,GACVA,MA6HPiB,aAvGkB,WAClB,MAAO,gBAAO9C,gBAAgBE,OAAsD,OAAzBF,gBAAgBE,MAAiBF,gBAAgBE,KAAK6C,aAvCnH,CAgJGC,Q","file":"api-client.js","sourcesContent":["\"use strict\";\n\n(function ($) {\n\n\tconst storage = localStorage;\n\tconst ajax = CachedCommunity.ajax;\n\tconst user = _restore_user_state();\n\n\tCachedCommunity.EVENT = {\n\t\tuser_update: \"cached_community_user_update\",\n\t\tuser_data_update: \"cached_community_user_data_update\",\n\t};\n\n\t/**\n\t * get login state\n\t */\n\tconst fetchUserState = ()=> _getRequest(ajax.login).then(data => {\n\t\t_save_user_state(data);\n\t\treturn data;\n\t});\n\n\t/**\n\t * login\n\t * @param {string} user\n\t * @param {string} password\n\t * @param {boolean} remember\n\t * @private\n\t */\n\tconst login = (user, password, remember = true) => _postRequest(\n\t\tajax.login,\n\t\t{user, password, remember}\n\t).then(data => {\n\t\t_save_user_state(data.user);\n\t\treturn data;\n\t})\n\n\t/**\n\t * get logged in state\n\t * @private\n\t */\n\tconst isLoggedIn = () => {\n\t\treturn typeof CachedCommunity.user !== typeof undefined && CachedCommunity.user !== null && CachedCommunity.user.logged_in;\n\t}\n\n\t/**\n\t * check activity stream\n\t * @private\n\t */\n\tconst get_activity = () => _getRequest()\n\n\t/**\n\t * logout\n\t * @private\n\t */\n\tconst logout = () => _postRequest(ajax.logout).then(data => {\n\t\t_delete_user_state();\n\t\treturn data;\n\t});\n\n\t// -------------------------------------------------------------------------------------\n\t// cache\n\t// -------------------------------------------------------------------------------------\n\n\t/**\n\t * set user object\n\t * @private\n\t */\n\tfunction _save_user_state(user) {\n\t\t/*\n\t\t * do not overwrite values but those from server\n\t\t */\n\t\tCachedCommunity.user = {\n\t\t\t...(CachedCommunity.user || {}),\n\t\t\t...user,\n\t\t};\n\t\tstorage.setItem('cached_community_user', JSON.stringify(CachedCommunity.user));\n\t\tdocument.body.dispatchEvent(_get_event(CachedCommunity.EVENT.user_update));\n\t}\n\n\tfunction _delete_user_state() {\n\t\tstorage.removeItem('cached_community_user');\n\t\tdocument.body.dispatchEvent(_get_event(CachedCommunity.EVENT.user_update));\n\t}\n\n\tfunction _restore_user_state(){\n\t\treturn JSON.parse(storage.getItem('cached_community_user'));\n\t}\n\n\tfunction _get_event(event) {\n\t\tlet _event;\n\t\tif (typeof Event === 'function') {\n\t\t\t_event = new Event(event);\n\t\t} else {\n\t\t\t_event = document.createEvent('Event');\n\t\t\t_event.initEvent(event, true, true);\n\t\t}\n\t\treturn _event;\n\t}\n\n\t// -------------------------------------------------------------------------------------\n\t// ajax requests\n\t// -------------------------------------------------------------------------------------\n\tconst _getRequest = (url, params = {})=> _request(url, \"GET\", params);\n\tconst _postRequest = (url, params = {})=> _request(url, \"POST\", params);\n\n\t/**\n\t *\n\t * @param {string} url\n\t * @param {string} method\n\t * @param {object} params\n\t * @param {string|boolean} nonce\n\t * @private\n\t * @return jqXHR\n\t */\n\tconst _request = (url, method , params= {}) => new Promise((resolve, reject)=>{\n\t\t$.ajax({\n\t\t\tmethod,\n\t\t\turl,\n\t\t\tdata: params,\n\t\t\tdataType: \"json\",\n\t\t\tcache: false,\n\t\t\txhrFields: {\n\t\t\t\twithCredentials: true,\n\t\t\t},\n\t\t})\n\t\t\t.then(data=>{\n\t\t\t\tresolve(data);\n\t\t\t})\n\t\t\t.fail((data, status, error) => {\n\t\t\t\treject(data, status, error)\n\t\t\t});\n\t})\n\n\n\t// ---------------------------\n\t// init object\n\t// ---------------------------\n\twindow.CachedCommunity = {\n\t\t...CachedCommunity,\n\t\tuser: _restore_user_state(),\n\t\tlogin,\n\t\tlogout,\n\t\tfetchUserState,\n\t\tis_logged_in: isLoggedIn,\n\t}\n\n})(jQuery);\n"],"sourceRoot":""}